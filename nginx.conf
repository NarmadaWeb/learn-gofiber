# Contoh server block Nginx untuk aplikasi Fiber
# Simpan sebagai /etc/nginx/sites-available/myapp.conf (atau nama lain)
# Lalu buat symlink ke /etc/nginx/sites-enabled/

# Upstream block (opsional tapi bagus untuk load balancing/readability)
# Mendefinisikan backend aplikasi Fiber Anda
upstream fiber_backend {
    # Alamat dan port tempat aplikasi Fiber berjalan (di server yang sama atau berbeda)
    # Jika Fiber berjalan di port 3000 di server yang sama:
    server 127.0.0.1:3000;

    # Jika ada beberapa instance Fiber (misal dengan Prefork atau beberapa container):
    # server 127.0.0.1:3001;
    # server backend_server_ip:3000;

    # Opsi tambahan (jarang diperlukan untuk setup sederhana):
    # keepalive 32; # Keepalive connections to backend
    # least_conn; # Load balancing method (jika > 1 server)
}

server {
    # === Mendengarkan Port ===
    # Dengar di port 80 untuk HTTP
    listen 80;
    # Dengar juga di IPv6 jika dikonfigurasi
    listen [::]:80;

    # (DIREKOMENDASIKAN) Dengar di port 443 untuk HTTPS
    # listen 443 ssl http2;
    # listen [::]:443 ssl http2;

    # Nama domain yang dilayani oleh server block ini
    server_name yourdomain.com www.yourdomain.com;

    # === Konfigurasi SSL (jika listen 443) ===
    # ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem; # Path ke sertifikat Anda
    # ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem; # Path ke private key
    # Include file konfigurasi SSL dari Let's Encrypt atau sumber lain
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # === Logging ===
    access_log /var/log/nginx/myapp_access.log;
    error_log /var/log/nginx/myapp_error.log;

    # === Redirect HTTP ke HTTPS (jika menggunakan SSL) ===
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # }

    # === Lokasi Utama (Proxy ke Fiber) ===
    location / {
        # Teruskan request ke upstream block yang didefinisikan di atas
        proxy_pass http://fiber_backend;

        # === Set Header Proxy ===
        # Teruskan header Host asli dari client ke backend Fiber
        proxy_set_header Host $host;
        # Teruskan IP address asli client (penting jika Fiber perlu IP client)
        proxy_set_header X-Real-IP $remote_addr;
        # Tambahkan IP Nginx ke daftar X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Teruskan skema protokol asli (http atau https)
        proxy_set_header X-Forwarded-Proto $scheme;
        # Teruskan port asli (jika berbeda)
        # proxy_set_header X-Forwarded-Port $server_port;

        # === Pengaturan Proxy Lainnya ===
        # Timeout untuk koneksi ke backend
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer (sesuaikan jika perlu menangani response besar)
        # proxy_buffers 8 16k;
        # proxy_buffer_size 32k;

        # Jika Anda ingin Nginx menangani Gzip (matikan kompresi di Fiber)
        # gzip on;
        # gzip_types text/plain text/css application/json application/javascript ...;
        # proxy_set_header Accept-Encoding ""; # Mencegah backend kompresi ganda

        # === Pengaturan untuk WebSocket (jika aplikasi Fiber menggunakan WebSocket) ===
        # location /ws { # atau path WebSocket Anda
        #     proxy_pass http://fiber_backend;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection "upgrade";
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     # Set timeout yang lebih panjang untuk koneksi WebSocket
        #     proxy_read_timeout 86400s; # 24 jam
        #     proxy_send_timeout 86400s;
        # }
    }

    # === Lokasi untuk File Statis (Opsional - Nginx bisa lebih cepat) ===
    # Jika Anda ingin Nginx menyajikan file statis secara langsung
    # location /static/ {
    #     # Path ke direktori file statis di server
    #     alias /path/ke/direktori/aplikasi/public/;
    #     # Aktifkan caching di browser client
    #     expires 7d;
    #     # Matikan log akses untuk file statis (mengurangi noise log)
    #     access_log off;
    #     # Tambahkan header Cache-Control tambahan jika perlu
    #     add_header Cache-Control "public";
    # }

    # === Penanganan Error (Opsional) ===
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html; # Lokasi halaman error Nginx default
    # }

    # Batasi ukuran body request client (penting untuk keamanan)
    client_max_body_size 10m; # Contoh 10 MB
}
